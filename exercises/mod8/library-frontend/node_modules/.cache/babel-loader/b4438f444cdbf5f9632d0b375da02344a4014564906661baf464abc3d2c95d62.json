{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      // Deliver most recent error or result.\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    // related classes\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    // active state\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      _f = options.initialFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy: initialFetchPolicy,\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    // The `query` computed property will always reflect the document transformed\n    // by the last run query. `this.options.query` will always reflect the raw\n    // untransformed query to ensure document transforms with runtime conditionals\n    // are run on the original document.\n    get: function () {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    // Computed shorthand for this.options.variables, preserved for\n    // backwards compatibility.\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      // TODO: this code doesnâ€™t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    // Use the last result as long as the variables match this.variables.\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (\n    // These fetch policies should never deliver data from the cache, unless\n    // redelivering a previously delivered result.\n    skipCacheDataFor(fetchPolicy) ||\n    // If this.options.query has @client(always: true) fields, we cannot\n    // trust diff.result, since it was read from the cache without running\n    // local resolvers (and it's too late to run resolvers now, since we must\n    // return a result synchronously).\n    this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !equalByQuery(this.query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      // Always disable polling for refetches.\n      pollInterval: 0\n    };\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\"\n    });\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        globalThis.__DEV__ !== false && invariant.error(21, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason,\n  // It's possible to use this method to apply options.nextFetchPolicy to\n  // options.fetchPolicy even if options !== this.options, though that happens\n  // most often when the options are temporary, used for only one request and\n  // then thrown away, so nextFetchPolicy may not end up mattering.\n  options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n  };\n  // Turns polling on or off based on this.options.pollInterval.\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    invariant(pollInterval, 22);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var error = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast =\n    // Refetching uses a disposable Concast to allow refetches using different\n    // options/variables, without permanently altering the options of the\n    // original ObservableQuery.\n    newNetworkStatus === NetworkStatus.refetch ||\n    // The fetchMore method does not actually call the reobserve method, but,\n    // if it did, it would definitely use a disposable Concast.\n    newNetworkStatus === NetworkStatus.fetchMore ||\n    // Polling uses a disposable Concast so the polling options (which force\n    // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n    newNetworkStatus === NetworkStatus.poll;\n    // Save the old variables, since Object.assign may modify them below.\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ?\n    // Disposable Concast fetches receive a shallow copy of this.options\n    // (merged with newOptions), leaving this.options unmodified.\n    mergedOptions : assign(this.options, mergedOptions);\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) &&\n      // Don't mess with the fetchPolicy if it's currently \"standby\".\n      options.fetchPolicy !== \"standby\" &&\n      // If we're changing the fetchPolicy anyway, don't try to change it here\n      // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n      options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = options.variables && __assign({}, options.variables);\n    var _a = this.fetch(options, newNetworkStatus, query),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function (result) {\n        finishWaitingForOwnResult();\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        finishWaitingForOwnResult();\n        _this.reportError(error, variables);\n      }\n    };\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.resubscribeAfterError = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    var last = this.last;\n    this.resetLastResults();\n    var subscription = this.subscribe.apply(this, args);\n    this.last = last;\n    return subscription;\n  };\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(\n    // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.reportResult.\n    this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, \"error\", this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy: function (currentFetchPolicy, context) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof this.nextFetchPolicy === \"function\") {\n          return this.nextFetchPolicy(currentFetchPolicy, context);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(23, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(24, missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"names":["__assign","__extends","invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","equalByQuery","assign","Object","hasOwnProperty","ObservableQuery","_super","_a","queryManager","queryInfo","options","_this","call","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","subscriptions","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","_b","defaultOptions","watchQuery","_c","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","queryId","generateQueryId","opDef","query","queryName","name","value","defineProperty","prototype","get","lastQuery","enumerable","configurable","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","getCurrentResult","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","globalThis","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","isDifferentFromLastResult","newResult","resultIsDifferent","hasNonreactiveDirective","getLast","key","variablesMustMatch","getLastError","resetLastResults","resetQueryStoreErrors","resetErrors","refetch","reobserveOptions","pollInterval","queryDef","vars","variableDefinitions","some","v","variable","warn","resetLastWrite","fetchMore","fetchMoreOptions","combinedOptions","transformDocument","qid","originalNetworkStatus","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","fetchMoreResult","cache","batch","update","updateQuery","optimistic","previous","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","subscribeToMore","startGraphQLSubscription","document","context","subscriptionData","err","onError","setOptions","newOptions","silentSetOptions","mergedOptions","setVariables","mapFn","broadcastQueries","startPolling","updatePolling","stopPolling","applyNextFetchPolicy","reason","nextFetchPolicy","observable","fetch","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","reobserveAsConcast","useDisposableConcast","oldVariables","oldFetchPolicy","finishWaitingForOwnResult","concast","fromLink","reportResult","reportError","removeObserver","addObserver","promise","resubscribeAfterError","args","_i","arguments","length","apply","lastError","isDifferent","errorResult","errors","graphQLErrors","hasObservers","forEach","sub","clear","stopQuery","transform","obsQuery","currentFetchPolicy","message","stack","debug"],"sources":["C:/Users/alici/Projets Web/web3-rev/exercises/mod8/library-frontend/node_modules/@apollo/client/core/ObservableQuery.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition, } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : (fetchPolicy) : _f;\n        _this.options = __assign(__assign({}, options), { \n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy, \n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function () {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO: this code doesnâ€™t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            NetworkStatus.ready;\n        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (\n        // These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) ||\n            // If this.options.query has @client(always: true) fields, we cannot\n            // trust diff.result, since it was read from the cache without running\n            // local resolvers (and it's too late to run resolvers now, since we must\n            // return a result synchronously).\n            this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n            // Fall through.\n        }\n        else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete &&\n                    result.networkStatus === NetworkStatus.loading &&\n                    (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ?\n            !equalByQuery(this.query, this.last.result, newResult, this.variables)\n            : !equal(this.last.result, newResult);\n        return (resultIsDifferent || (variables && !equal(this.last.variables, variables)));\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0,\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        }\n        else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                globalThis.__DEV__ !== false && invariant.warn(\n                    20,\n                    variables,\n                    ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef\n                );\n            }\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : (__assign(__assign(__assign(__assign({}, this.options), { query: this.options.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) })))), { \n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\" });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery =\n            fetchMoreOptions.query ?\n                this.transformDocument(this.options.query)\n                : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n            .then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            // Performing this cache update inside a cache.batch transaction ensures\n            // any affected cache.watch watchers are notified at most once about any\n            // updates. Most watchers will be using the QueryInfo class, which\n            // responds to notifications by calling reobserveCacheFirst to deliver\n            // fetchMore cache results back to this ObservableQuery.\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables,\n                            });\n                        });\n                    }\n                    else {\n                        // If we're using a field policy instead of updateQuery, the only\n                        // thing we need to do is write the new data to the cache using\n                        // combinedOptions.variables (instead of this.variables, which is\n                        // what this.updateQuery uses, because it works by abusing the\n                        // original field value, keyed by the original variables).\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    // Record the DocumentNode associated with any watched query whose\n                    // data were updated by the cache writes above.\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        })\n            .finally(function () {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && invariant.error(21, err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n        var mergedOptions = compact(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, \n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n                // Do nothing, leaving options.fetchPolicy unchanged.\n            }\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        invariant(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ?\n                            \"no-cache\"\n                            : \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !equal(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return (this.last = __assign({ result: this.queryManager.assumeImmutableResults ?\n                newResult\n                : cloneDeep(newResult), variables: variables }, (error ? { error: error } : null)));\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = \n        // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === NetworkStatus.refetch ||\n            // The fetchMore method does not actually call the reobserve method, but,\n            // if it did, it would definitely use a disposable Concast.\n            newNetworkStatus === NetworkStatus.fetchMore ||\n            // Polling uses a disposable Concast so the polling options (which force\n            // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n            newNetworkStatus === NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = compact(this.options, newOptions || {});\n        var options = useDisposableConcast ?\n            // Disposable Concast fetches receive a shallow copy of this.options\n            // (merged with newOptions), leaving this.options unmodified.\n            mergedOptions\n            : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions &&\n                newOptions.variables &&\n                !equal(newOptions.variables, oldVariables) &&\n                // Don't mess with the fetchPolicy if it's currently \"standby\".\n                options.fetchPolicy !== \"standby\" &&\n                // If we're changing the fetchPolicy anyway, don't try to change it here\n                // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n                options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function () {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && __assign({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function (result) {\n                finishWaitingForOwnResult();\n                _this.reportResult(result, variables);\n            },\n            error: function (error) {\n                finishWaitingForOwnResult();\n                _this.reportError(error, variables);\n            },\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus)\n            .promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(\n        // Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            iterateObserversSafely(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        iterateObserversSafely(this.observers, \"error\", (this.last.error = error));\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function (document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function (currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && invariant.error(23, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n    return (fetchPolicy === \"network-only\" ||\n        fetchPolicy === \"no-cache\" ||\n        fetchPolicy === \"standby\");\n}\n//# sourceMappingURL=ObservableQuery.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}